"use strict";(globalThis.webpackChunksuperset=globalThis.webpackChunksuperset||[]).push([[5476],{65476:(e,t,i)=>{i.d(t,{A:()=>F});const r=new Float32Array(12);function o(e,t=2){let i=0;for(const o of e)for(let e=0;e<t;e++)r[i++]=o[e]||0;return r}var s=i(77117),n=i(45730);class a{device;model;sampler;currentIndex=0;samplerTextureMap=null;bindings=[];resources={};constructor(e,t){this.device=e,this.sampler=e.createSampler({addressModeU:"clamp-to-edge",addressModeV:"clamp-to-edge",minFilter:"nearest",magFilter:"nearest",mipmapFilter:"nearest"}),this.model=new s.K(this.device,{id:t.id||"texture-transform-model",fs:t.fs||(0,n.Wk)({input:t.targetTextureVarying,inputChannels:t.targetTextureChannels,output:"transform_output"}),vertexCount:t.vertexCount,...t}),this._initialize(t),Object.seal(this)}destroy(){this.model.destroy();for(const e of this.bindings)e.framebuffer?.destroy()}delete(){this.destroy()}run(e){const{framebuffer:t}=this.bindings[this.currentIndex],i=this.device.beginRenderPass({framebuffer:t,...e});this.model.draw(i),i.end()}getTargetTexture(){const{targetTexture:e}=this.bindings[this.currentIndex];return e}getFramebuffer(){return this.bindings[this.currentIndex].framebuffer}_initialize(e){this._updateBindings(e)}_updateBindings(e){this.bindings[this.currentIndex]=this._updateBinding(this.bindings[this.currentIndex],e)}_updateBinding(e,{sourceBuffers:t,sourceTextures:i,targetTexture:r}){if(e||(e={sourceBuffers:{},sourceTextures:{},targetTexture:null}),Object.assign(e.sourceTextures,i),Object.assign(e.sourceBuffers,t),r){e.targetTexture=r;const{width:t,height:i}=r;e.framebuffer&&e.framebuffer.destroy(),e.framebuffer=this.device.createFramebuffer({id:"transform-framebuffer",width:t,height:i,colorAttachments:[r]}),e.framebuffer.resize({width:t,height:i})}return e}_setSourceTextureParameters(){const e=this.currentIndex,{sourceTextures:t}=this.bindings[e];for(const e in t)t[e].sampler=this.sampler}}var u=i(82101),d=i(16704),h=i(89503),l=i(18277),g=i(75077);const c="uniform triangleUniforms {\n  float aggregationMode;\n  vec2 colorDomain;\n  float intensity;\n  float threshold;\n} triangle;\n",m={name:"triangle",vs:c,fs:c,uniformTypes:{aggregationMode:"f32",colorDomain:"vec2<f32>",intensity:"f32",threshold:"f32"}};class p extends g.A{getShaders(){return super.getShaders({vs:"#version 300 es\n#define SHADER_NAME heatp-map-layer-vertex-shader\nuniform sampler2D maxTexture;\nin vec3 positions;\nin vec2 texCoords;\nout vec2 vTexCoords;\nout float vIntensityMin;\nout float vIntensityMax;\nvoid main(void) {\ngl_Position = project_position_to_clipspace(positions, vec3(0.0), vec3(0.0));\nvTexCoords = texCoords;\nvec4 maxTexture = texture(maxTexture, vec2(0.5));\nfloat maxValue = triangle.aggregationMode < 0.5 ? maxTexture.r : maxTexture.g;\nfloat minValue = maxValue * triangle.threshold;\nif (triangle.colorDomain[1] > 0.) {\nmaxValue = triangle.colorDomain[1];\nminValue = triangle.colorDomain[0];\n}\nvIntensityMax = triangle.intensity / maxValue;\nvIntensityMin = triangle.intensity / minValue;\n}\n",fs:"#version 300 es\n#define SHADER_NAME triangle-layer-fragment-shader\nprecision highp float;\nuniform sampler2D weightsTexture;\nuniform sampler2D colorTexture;\nin vec2 vTexCoords;\nin float vIntensityMin;\nin float vIntensityMax;\nout vec4 fragColor;\nvec4 getLinearColor(float value) {\nfloat factor = clamp(value * vIntensityMax, 0., 1.);\nvec4 color = texture(colorTexture, vec2(factor, 0.5));\ncolor.a *= min(value * vIntensityMin, 1.0);\nreturn color;\n}\nvoid main(void) {\nvec4 weights = texture(weightsTexture, vTexCoords);\nfloat weight = weights.r;\nif (triangle.aggregationMode > 0.5) {\nweight /= max(1.0, weights.a);\n}\nif (weight <= 0.) {\ndiscard;\n}\nvec4 linearColor = getLinearColor(weight);\nlinearColor.a *= layer.opacity;\nfragColor = linearColor;\n}\n",modules:[u.A,m]})}initializeState({device:e}){this.setState({model:this._getModel(e)})}_getModel(e){const{vertexCount:t,data:i}=this.props;return new s.K(e,{...this.getShaders(),id:this.props.id,attributes:i.attributes,bufferLayout:[{name:"positions",format:"float32x3"},{name:"texCoords",format:"float32x2"}],topology:"triangle-strip",vertexCount:t})}draw(){const{model:e}=this.state,{aggregationMode:t,colorDomain:i,intensity:r,threshold:o,colorTexture:s,maxTexture:n,weightsTexture:a}=this.props,u={aggregationMode:t,colorDomain:i,intensity:r,threshold:o,colorTexture:s,maxTexture:n,weightsTexture:a};e.shaderInputs.setProps({triangle:u}),e.draw(this.context.renderPass)}}p.layerName="TriangleLayer";const x=p;var f=i(84402),T=i(91292);function v(e,t){const i={};for(const r in e)t.includes(r)||(i[r]=e[r]);return i}class w extends f.A{initializeAggregationLayer(e){super.initializeState(this.context),this.setState({ignoreProps:v(this.constructor._propTypes,e.data.props),dimensions:e})}updateState(e){super.updateState(e);const{changeFlags:t}=e;if(t.extensionsChanged){const e=this.getShaders({});e&&e.defines&&(e.defines.NON_INSTANCED_MODEL=1),this.updateShaders(e)}this._updateAttributes()}updateAttributes(e){this.setState({changedAttributes:e})}getAttributes(){return this.getAttributeManager().getAttributes()}getModuleSettings(){const{viewport:e,mousePosition:t,device:i}=this.context;return Object.assign(Object.create(this.props),{viewport:e,mousePosition:t,picking:{isActive:0},devicePixelRatio:i.canvasContext.cssToDeviceRatio()})}updateShaders(e){}isAggregationDirty(e,t={}){const{props:i,oldProps:r,changeFlags:o}=e,{compareAll:s=!1,dimension:n}=t,{ignoreProps:a}=this.state,{props:u,accessors:d=[]}=n,{updateTriggersChanged:h}=o;if(o.dataChanged)return!0;if(h){if(h.all)return!0;for(const e of d)if(h[e])return!0}if(s)return!!o.extensionsChanged||(0,T.Me)({oldProps:r,newProps:i,ignoreProps:a,propTypes:this.constructor._propTypes});for(const e of u)if(i[e]!==r[e])return!0;return!1}isAttributeChanged(e){const{changedAttributes:t}=this.state;return e?t&&void 0!==t[e]:!function(e){let t=!0;for(const i in e){t=!1;break}return t}(t)}_getAttributeManager(){return new h.A(this.context.device,{id:this.props.id,stats:this.context.stats})}}w.layerName="AggregationLayer";const y=w;var b=i(83102);const S="#version 300 es\nin vec3 positions;\nin vec3 positions64Low;\nin float weights;\nout vec4 weightsTexture;\nvoid main()\n{\nweightsTexture = vec4(weights * weight.weightsScale, 0., 0., 1.);\nfloat radiusTexels = project_pixel_size(weight.radiusPixels) * weight.textureWidth / (weight.commonBounds.z - weight.commonBounds.x);\ngl_PointSize = radiusTexels * 2.;\nvec3 commonPosition = project_position(positions, positions64Low);\ngl_Position.xy = (commonPosition.xy - weight.commonBounds.xy) / (weight.commonBounds.zw - weight.commonBounds.xy) ;\ngl_Position.xy = (gl_Position.xy * 2.) - (1.);\ngl_Position.w = 1.0;\n}\n",C="#version 300 es\nin vec4 weightsTexture;\nout vec4 fragColor;\nfloat gaussianKDE(float u){\nreturn pow(2.71828, -u*u/0.05555)/(1.77245385*0.166666);\n}\nvoid main()\n{\nfloat dist = length(gl_PointCoord - vec2(0.5, 0.5));\nif (dist > 0.5) {\ndiscard;\n}\nfragColor = weightsTexture * gaussianKDE(2. * dist);\nDECKGL_FILTER_COLOR(fragColor, geometry);\n}\n",_={name:"weight",vs:"uniform weightUniforms {\n  vec4 commonBounds;\n  float radiusPixels;\n  float textureWidth;\n  float weightsScale;\n} weight;\n",uniformTypes:{commonBounds:"vec4<f32>",radiusPixels:"f32",textureWidth:"f32",weightsScale:"f32"}},M={name:"maxWeight",vs:"uniform maxWeightUniforms {\n  float textureSize;\n} maxWeight;\n",uniformTypes:{textureSize:"f32"}},P={format:"rgba8unorm",mipmaps:!1,sampler:{minFilter:"linear",magFilter:"linear",addressModeU:"clamp-to-edge",addressModeV:"clamp-to-edge"}},A=[0,0],B={SUM:0,MEAN:1},D={getPosition:{type:"accessor",value:e=>e.position},getWeight:{type:"accessor",value:1},intensity:{type:"number",min:0,value:1},radiusPixels:{type:"number",min:1,max:100,value:50},colorRange:b.QO,threshold:{type:"number",min:0,max:1,value:.05},colorDomain:{type:"array",value:null,optional:!0},aggregation:"SUM",weightsTextureSize:{type:"number",min:128,max:2048,value:2048},debounceTimeout:{type:"number",min:0,max:1e3,value:500}},W=["float32-renderable-webgl","texture-blend-float-webgl"],z={data:{props:["radiusPixels"]}};class L extends y{getShaders(e){let t=[u.A];return e.modules&&(t=[...t,...e.modules]),super.getShaders({...e,modules:t})}initializeState(){super.initializeAggregationLayer(z),this.setState({colorDomain:A}),this._setupTextureParams(),this._setupAttributes(),this._setupResources()}shouldUpdateState({changeFlags:e}){return e.somethingChanged}updateState(e){super.updateState(e),this._updateHeatmapState(e)}_updateHeatmapState(e){const{props:t,oldProps:i}=e,r=this._getChangeFlags(e);(r.dataChanged||r.viewportChanged)&&(r.boundsChanged=this._updateBounds(r.dataChanged),this._updateTextureRenderingBounds()),r.dataChanged||r.boundsChanged?(clearTimeout(this.state.updateTimer),this.setState({isWeightMapDirty:!0})):r.viewportZoomChanged&&this._debouncedUpdateWeightmap(),t.colorRange!==i.colorRange&&this._updateColorTexture(e),this.state.isWeightMapDirty&&this._updateWeightmap(),this.setState({zoom:e.context.viewport.zoom})}renderLayers(){const{weightsTexture:e,triPositionBuffer:t,triTexCoordBuffer:i,maxWeightsTexture:r,colorTexture:o,colorDomain:s}=this.state,{updateTriggers:n,intensity:a,threshold:u,aggregation:h}=this.props;return new(this.getSubLayerClass("triangle",x))(this.getSubLayerProps({id:"triangle-layer",updateTriggers:n}),{coordinateSystem:d.rf.DEFAULT,data:{attributes:{positions:t,texCoords:i}},vertexCount:4,maxTexture:r,colorTexture:o,aggregationMode:B[h]||0,weightsTexture:e,intensity:a,threshold:u,colorDomain:s})}finalizeState(e){super.finalizeState(e);const{weightsTransform:t,weightsTexture:i,maxWeightTransform:r,maxWeightsTexture:o,triPositionBuffer:s,triTexCoordBuffer:n,colorTexture:a,updateTimer:u}=this.state;t?.destroy(),i?.destroy(),r?.destroy(),o?.destroy(),s?.destroy(),n?.destroy(),a?.destroy(),u&&clearTimeout(u)}_getAttributeManager(){return new h.A(this.context.device,{id:this.props.id,stats:this.context.stats})}_getChangeFlags(e){const t={},{dimensions:i}=this.state;t.dataChanged=this.isAttributeChanged()?"attribute changed":this.isAggregationDirty(e,{compareAll:!0,dimension:i.data})&&"aggregation is dirty",t.viewportChanged=e.changeFlags.viewportChanged;const{zoom:r}=this.state;return e.context.viewport&&e.context.viewport.zoom===r||(t.viewportZoomChanged=!0),t}_createTextures(){const{textureSize:e,format:t}=this.state;this.setState({weightsTexture:this.context.device.createTexture({...P,width:e,height:e,format:t}),maxWeightsTexture:this.context.device.createTexture({...P,width:1,height:1,format:t})})}_setupAttributes(){this.getAttributeManager().add({positions:{size:3,type:"float64",accessor:"getPosition"},weights:{size:1,accessor:"getWeight"}}),this.setState({positionAttributeName:"positions"})}_setupTextureParams(){const{device:e}=this.context,{weightsTextureSize:t}=this.props,i=Math.min(t,e.limits.maxTextureDimension2D),r=W.every((t=>e.features.has(t))),o=r?"rgba32float":"rgba8unorm",s=r?1:1/255;this.setState({textureSize:i,format:o,weightsScale:s}),r||l.A.warn(`HeatmapLayer: ${this.id} rendering to float texture not supported, falling back to low precision format`)()}_createWeightsTransform(e){let{weightsTransform:t}=this.state;const{weightsTexture:i}=this.state,r=this.getAttributeManager();t?.destroy(),t=new a(this.context.device,{id:`${this.id}-weights-transform`,bufferLayout:r.getBufferLayouts(),vertexCount:1,targetTexture:i,parameters:{depthWriteEnabled:!1,blendColorOperation:"add",blendColorSrcFactor:"one",blendColorDstFactor:"one",blendAlphaSrcFactor:"one",blendAlphaDstFactor:"one"},topology:"point-list",...e,modules:[...e.modules,_]}),this.setState({weightsTransform:t})}_setupResources(){this._createTextures();const{device:e}=this.context,{textureSize:t,weightsTexture:i,maxWeightsTexture:r}=this.state,o=this.getShaders({vs:S,fs:C});this._createWeightsTransform(o);const s=this.getShaders({vs:"#version 300 es\nuniform sampler2D inTexture;\nout vec4 outTexture;\nvoid main()\n{\nint yIndex = gl_VertexID / int(maxWeight.textureSize);\nint xIndex = gl_VertexID - (yIndex * int(maxWeight.textureSize));\nvec2 uv = (0.5 + vec2(float(xIndex), float(yIndex))) / maxWeight.textureSize;\noutTexture = texture(inTexture, uv);\ngl_Position = vec4(0.0, 0.0, 0.0, 1.0);\ngl_PointSize = 1.0;\n}\n",fs:"#version 300 es\nin vec4 outTexture;\nout vec4 fragColor;\nvoid main() {\nfragColor = outTexture;\nfragColor.g = outTexture.r / max(1.0, outTexture.a);\n}\n",modules:[M]}),n=new a(e,{id:`${this.id}-max-weights-transform`,targetTexture:r,...s,vertexCount:t*t,topology:"point-list",parameters:{depthWriteEnabled:!1,blendColorOperation:"max",blendAlphaOperation:"max",blendColorSrcFactor:"one",blendColorDstFactor:"one",blendAlphaSrcFactor:"one",blendAlphaDstFactor:"one"}}),u={inTexture:i,textureSize:t};n.model.shaderInputs.setProps({maxWeight:u}),this.setState({weightsTexture:i,maxWeightsTexture:r,maxWeightTransform:n,zoom:null,triPositionBuffer:e.createBuffer({byteLength:48}),triTexCoordBuffer:e.createBuffer({byteLength:48})})}updateShaders(e){this._createWeightsTransform({vs:S,fs:C,...e})}_updateMaxWeightValue(){const{maxWeightTransform:e}=this.state;e.run({parameters:{viewport:[0,0,1,1]},clearColor:[0,0,0,0]})}_updateBounds(e=!1){const{viewport:t}=this.context,i=[t.unproject([0,0]),t.unproject([t.width,0]),t.unproject([0,t.height]),t.unproject([t.width,t.height])].map((e=>e.map(Math.fround))),r=function(e){const t=e.map((e=>e[0])),i=e.map((e=>e[1])),r=Math.min.apply(null,t),o=Math.max.apply(null,t);return[r,Math.min.apply(null,i),o,Math.max.apply(null,i)]}(i),o={visibleWorldBounds:r,viewportCorners:i};let s=!1;if(e||!this.state.worldBounds||(n=this.state.worldBounds,!((a=r)[0]>=n[0]&&a[2]<=n[2]&&a[1]>=n[1]&&a[3]<=n[3]))){const e=this._worldToCommonBounds(r),t=this._commonToWorldBounds(e);this.props.coordinateSystem===d.rf.LNGLAT&&(t[1]=Math.max(t[1],-85.051129),t[3]=Math.min(t[3],85.051129),t[0]=Math.max(t[0],-360),t[2]=Math.min(t[2],360));const i=this._worldToCommonBounds(t);o.worldBounds=t,o.normalizedCommonBounds=i,s=!0}var n,a;return this.setState(o),s}_updateTextureRenderingBounds(){const{triPositionBuffer:e,triTexCoordBuffer:t,normalizedCommonBounds:i,viewportCorners:r}=this.state,{viewport:s}=this.context;e.write(o(r,3));const n=r.map((e=>function(e,t){const[i,r,o,s]=t;return[(e[0]-i)/(o-i),(e[1]-r)/(s-r)]}(s.projectPosition(e),i)));t.write(o(n,2))}_updateColorTexture(e){const{colorRange:t}=e.props;let{colorTexture:i}=this.state;const r=(0,b.Y5)(t,!1,Uint8Array);i&&i?.width===t.length?i.setTexture2DData({data:r}):(i?.destroy(),i=this.context.device.createTexture({...P,data:r,width:t.length,height:1})),this.setState({colorTexture:i})}_updateWeightmap(){const{radiusPixels:e,colorDomain:t,aggregation:i}=this.props,{worldBounds:r,textureSize:o,weightsScale:s,weightsTexture:n}=this.state,a=this.state.weightsTransform;this.state.isWeightMapDirty=!1;const u=this._worldToCommonBounds(r,{useLayerCoordinateSystem:!0});if(t&&"SUM"===i){const{viewport:e}=this.context,i=e.distanceScales.metersPerUnit[2]*(u[2]-u[0])/o;this.state.colorDomain=t.map((e=>e*i*s))}else this.state.colorDomain=t||A;const d=this.getAttributeManager().getAttributes(),h=this.getModuleSettings();this._setModelAttributes(a.model,d),a.model.setVertexCount(this.getNumInstances());const l={radiusPixels:e,commonBounds:u,textureWidth:o,weightsScale:s,weightsTexture:n},{viewport:g,devicePixelRatio:c,coordinateSystem:m,coordinateOrigin:p}=h,{modelMatrix:x}=this.props;a.model.shaderInputs.setProps({project:{viewport:g,devicePixelRatio:c,modelMatrix:x,coordinateSystem:m,coordinateOrigin:p},weight:l}),a.run({parameters:{viewport:[0,0,o,o]},clearColor:[0,0,0,0]}),this._updateMaxWeightValue()}_debouncedUpdateWeightmap(e=!1){let{updateTimer:t}=this.state;const{debounceTimeout:i}=this.props;e?(t=null,this._updateBounds(!0),this._updateTextureRenderingBounds(),this.setState({isWeightMapDirty:!0})):(this.setState({isWeightMapDirty:!1}),clearTimeout(t),t=setTimeout(this._debouncedUpdateWeightmap.bind(this,!0),i)),this.setState({updateTimer:t})}_worldToCommonBounds(e,t={}){const{useLayerCoordinateSystem:i=!1}=t,[r,o,s,n]=e,{viewport:a}=this.context,{textureSize:u}=this.state,{coordinateSystem:h}=this.props,l=i&&(h===d.rf.LNGLAT_OFFSETS||h===d.rf.METER_OFFSETS),g=l?a.projectPosition(this.props.coordinateOrigin):[0,0],c=2*u/a.scale;let m,p;return i&&!l?(m=this.projectPosition([r,o,0]),p=this.projectPosition([s,n,0])):(m=a.projectPosition([r,o,0]),p=a.projectPosition([s,n,0])),function(e,t,i){const[r,o,s,n]=e,a=s-r,u=n-o;let d=a,h=u;a/u<t/i?d=t/i*u:h=i/t*a,d<t&&(d=t,h=i);const l=(s+r)/2,g=(n+o)/2;return[l-d/2,g-h/2,l+d/2,g+h/2]}([m[0]-g[0],m[1]-g[1],p[0]-g[0],p[1]-g[1]],c,c)}_commonToWorldBounds(e){const[t,i,r,o]=e,{viewport:s}=this.context,n=s.unprojectPosition([t,i]),a=s.unprojectPosition([r,o]);return n.slice(0,2).concat(a.slice(0,2))}}L.layerName="HeatmapLayer",L.defaultProps=D;const F=L}}]);