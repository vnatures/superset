"use strict";(globalThis.webpackChunksuperset=globalThis.webpackChunksuperset||[]).push([[1059],{91059:(t,e,o)=>{o.d(e,{A:()=>pt});var n=o(82101),s=o(20688),i=o(35775),r=o(16704),a=o(91018),c=o(82077),g=o(1334),l=o(48928),u=o(12965);const p=.5,d=1/6,S={N:[0,p],E:[p,0],S:[0,-.5],W:[-.5,0],NE:[p,p],NW:[-.5,p],SE:[p,-.5],SW:[-.5,-.5]},h=[S.W,S.SW,S.S],f=[S.S,S.SE,S.E],N=[S.E,S.NE,S.N],m=[S.NW,S.W,S.N],E=[[-.5,d],[-.5,-d],[-d,-.5],[d,-.5]],W=[[-d,-.5],[d,-.5],[p,-d],[p,d]],b=[[p,-d],[p,d],[d,p],[-d,p]],y=[[-.5,d],[-.5,-d],[d,p],[-d,p]],C=[S.W,S.SW,S.SE,S.E],v=[S.S,S.SE,S.NE,S.N],A=[S.NW,S.W,S.E,S.NE],z=[S.NW,S.SW,S.S,S.N],O=[[-.5,d],[-.5,-d],[p,-d],[p,d]],R=[[-d,-.5],[d,-.5],[d,p],[-d,p]],w=[S.NW,S.SW,S.SE,S.NE],I=[S.NW,S.SW,S.SE,S.E,S.N],x=[S.W,S.SW,S.SE,S.NE,S.N],M=[S.NW,S.W,S.S,S.SE,S.NE],P=[S.NW,S.SW,S.S,S.E,S.NE],V=[S.NW,S.W,[p,-d],[p,d],S.N],L=[[-d,-.5],[d,-.5],S.E,S.NE,S.N],j=[[-.5,d],[-.5,-d],S.S,S.SE,S.E],B=[S.W,S.SW,S.S,[d,p],[-d,p]],U=[S.NW,S.W,[-d,-.5],[d,-.5],S.N],_=[[-.5,d],[-.5,-d],S.E,S.NE,S.N],k=[S.S,S.SE,S.E,[d,p],[-d,p]],F=[S.W,S.SW,S.S,[p,-d],[p,d]],D=[S.W,S.SW,S.SE,S.E,[d,p],[-d,p]],T=[[-.5,d],[-.5,-d],S.S,S.SE,S.NE,S.N],G=[S.NW,S.W,[-d,-.5],[d,-.5],S.E,S.NE],q=[S.NW,S.SW,S.S,[p,-d],[p,d],S.N],H=[S.W,S.SW,S.S,S.E,S.NE,S.N],J=[S.NW,S.W,S.S,S.SE,S.E,S.N],K=[[-.5,d],[-.5,-d],[-d,-.5],[d,-.5],S.E,S.NE,S.N],Q=[S.W,S.SW,S.S,[p,-d],[p,d],[d,p],[-d,p]],X=[S.NW,S.W,[-d,-.5],[d,-.5],[p,-d],[p,d],S.N],Y=[[-.5,d],[-.5,-d],S.S,S.SE,S.E,[d,p],[-d,p]],Z=[[-.5,d],[-.5,-d],[-d,-.5],[d,-.5],[p,-d],[p,d],[d,p],[-d,p]],$={0:[],1:[[S.W,S.S]],2:[[S.S,S.E]],3:[[S.W,S.E]],4:[[S.N,S.E]],5:{0:[[S.W,S.S],[S.N,S.E]],1:[[S.W,S.N],[S.S,S.E]]},6:[[S.N,S.S]],7:[[S.W,S.N]],8:[[S.W,S.N]],9:[[S.N,S.S]],10:{0:[[S.W,S.N],[S.S,S.E]],1:[[S.W,S.S],[S.N,S.E]]},11:[[S.N,S.E]],12:[[S.W,S.E]],13:[[S.S,S.E]],14:[[S.W,S.S]],15:[]};function tt(t){return parseInt(t,4)}const et={[tt("0000")]:[],[tt("2222")]:[],[tt("2221")]:[h],[tt("2212")]:[f],[tt("2122")]:[N],[tt("1222")]:[m],[tt("0001")]:[h],[tt("0010")]:[f],[tt("0100")]:[N],[tt("1000")]:[m],[tt("2220")]:[E],[tt("2202")]:[W],[tt("2022")]:[b],[tt("0222")]:[y],[tt("0002")]:[E],[tt("0020")]:[W],[tt("0200")]:[b],[tt("2000")]:[y],[tt("0011")]:[C],[tt("0110")]:[v],[tt("1100")]:[A],[tt("1001")]:[z],[tt("2211")]:[C],[tt("2112")]:[v],[tt("1122")]:[A],[tt("1221")]:[z],[tt("2200")]:[O],[tt("2002")]:[R],[tt("0022")]:[O],[tt("0220")]:[R],[tt("1111")]:[w],[tt("1211")]:[I],[tt("2111")]:[x],[tt("1112")]:[M],[tt("1121")]:[P],[tt("1011")]:[I],[tt("0111")]:[x],[tt("1110")]:[M],[tt("1101")]:[P],[tt("1200")]:[V],[tt("0120")]:[L],[tt("0012")]:[j],[tt("2001")]:[B],[tt("1022")]:[V],[tt("2102")]:[L],[tt("2210")]:[j],[tt("0221")]:[B],[tt("1002")]:[U],[tt("2100")]:[_],[tt("0210")]:[k],[tt("0021")]:[F],[tt("1220")]:[U],[tt("0122")]:[_],[tt("2012")]:[k],[tt("2201")]:[F],[tt("0211")]:[D],[tt("2110")]:[T],[tt("1102")]:[G],[tt("1021")]:[q],[tt("2011")]:[D],[tt("0112")]:[T],[tt("1120")]:[G],[tt("1201")]:[q],[tt("2101")]:[H],[tt("0121")]:[H],[tt("1012")]:[J],[tt("1210")]:[J],[tt("0101")]:{0:[h,N],1:[H],2:[H]},[tt("1010")]:{0:[m,f],1:[J],2:[J]},[tt("2121")]:{0:[H],1:[H],2:[h,N]},[tt("1212")]:{0:[J],1:[J],2:[m,f]},[tt("2120")]:{0:[K],1:[K],2:[E,N]},[tt("2021")]:{0:[Q],1:[Q],2:[h,b]},[tt("1202")]:{0:[X],1:[X],2:[m,W]},[tt("0212")]:{0:[Y],1:[Y],2:[f,y]},[tt("0102")]:{0:[E,N],1:[K],2:[K]},[tt("0201")]:{0:[h,b],1:[Q],2:[Q]},[tt("1020")]:{0:[m,W],1:[X],2:[X]},[tt("2010")]:{0:[f,y],1:[Y],2:[Y]},[tt("2020")]:{0:[y,W],1:[Z],2:[E,b]},[tt("0202")]:{0:[b,E],1:[Z],2:[y,W]}};function ot(t,e){return Number.isNaN(t)?0:Array.isArray(e)?t<e[0]?0:t<e[1]?1:2:t>=e?1:0}function nt(t){const{x:e,y:o,xRange:n,yRange:s,getValue:i,threshold:r}=t,a=e<n[0],c=e>=n[1]-1,g=o<s[0],l=o>=s[1]-1,u=a||c||g||l;let p,d,S,h,f=0;if(a||l)S=0;else{const t=i(e,o+1);S=ot(t,r),f+=t}if(c||l)h=0;else{const t=i(e+1,o+1);h=ot(t,r),f+=t}if(c||g)d=0;else{const t=i(e+1,o);d=ot(t,r),f+=t}if(a||g)p=0;else{const t=i(e,o);p=ot(t,r),f+=t}let N=-1;Number.isFinite(r)&&(N=S<<3|h<<2|d<<1|p),Array.isArray(r)&&(N=S<<6|h<<4|d<<2|p);let m=0;return u||(m=ot(f/4,r)),{code:N,meanCode:m}}function st(t){const{x:e,y:o,z:n,code:s,meanCode:i}=t;let r=et[s];Array.isArray(r)||(r=r[i]);const a=e+1,c=o+1,g=[];return r.forEach((t=>{const e=[];t.forEach((t=>{const o=a+t[0],s=c+t[1];e.push([o,s,n])})),g.push(e)})),g}function it(t){const{x:e,y:o,z:n,code:s,meanCode:i}=t;let r=$[s];Array.isArray(r)||(r=r[i]);const a=e+1,c=o+1,g=[];return r.forEach((t=>{t.forEach((t=>{const e=a+t[0],o=c+t[1];g.push([e,o,n])}))})),g}function rt(t){const{aggregator:e,binIdRange:o,channel:n}=t;if(e instanceof g.V){const t=e.getResult(n)?.buffer;if(t)return function(t,e){const[[o,n],[s,i]]=e,r=n-o,a=i-s;return(e,n)=>(n-=s,(e-=o)<0||e>=r||n<0||n>=a?NaN:t[n*r+e])}(new Float32Array(t.readSyncWebGL().buffer),o)}if(e instanceof l.M){const t=e.getResult(n)?.value,o=e.getBins()?.value;if(o&&t)return function(t,e,o){const n={};for(let s=0;s<o;s++){const o=e[2*s],i=e[2*s+1];n[o]=n[o]||{},n[o][i]=t[s]}return(t,e)=>n[t]?.[e]??NaN}(t,o,e.binCount)}return null}var at=o(34460),ct=o(54954);const gt={name:"binOptions",vs:"uniform binOptionsUniforms {\n  vec2 cellOriginCommon;\n  vec2 cellSizeCommon;\n} binOptions;\n",uniformTypes:{cellOriginCommon:"vec2<f32>",cellSizeCommon:"vec2<f32>"}},lt=[255,255,255,255];class ut extends u.A{getAggregatorType(){return this.props.gpuAggregation&&g.V.isSupported(this.context.device)?"gpu":"cpu"}createAggregator(t){return"cpu"===t?new l.M({dimensions:2,getBin:{sources:["positions"],getValue:({positions:t},e,o)=>{const n=this.state.aggregatorViewport.projectPosition(t),{cellSizeCommon:s,cellOriginCommon:i}=o;return[Math.floor((n[0]-i[0])/s[0]),Math.floor((n[1]-i[1])/s[1])]}},getValue:[{sources:["counts"],getValue:({counts:t})=>t}],onUpdate:this._onAggregationUpdate.bind(this)}):new g.V(this.context.device,{dimensions:2,channelCount:1,bufferLayout:this.getAttributeManager().getBufferLayouts({isInstanced:!1}),...super.getShaders({modules:[n.A,gt],vs:"\n  in vec3 positions;\n  in vec3 positions64Low;\n  in float counts;\n\n  void getBin(out ivec2 binId) {\n    vec3 positionCommon = project_position(positions, positions64Low);\n    vec2 gridCoords = floor(positionCommon.xy / binOptions.cellSizeCommon);\n    binId = ivec2(gridCoords);\n  }\n  void getValue(out float value) {\n    value = counts;\n  }\n  "}),onUpdate:this._onAggregationUpdate.bind(this)})}initializeState(){super.initializeState(),this.getAttributeManager().add({positions:{size:3,accessor:"getPosition",type:"float64",fp64:this.use64bitPositions()},counts:{size:1,accessor:"getWeight"}})}updateState(t){const e=super.updateState(t),{props:o,oldProps:n,changeFlags:i}=t,{aggregator:r}=this.state;if(e||i.dataChanged||o.cellSize!==n.cellSize||!(0,s.b)(o.gridOrigin,n.gridOrigin,1)||o.aggregation!==n.aggregation){this._updateBinOptions();const{cellSizeCommon:t,cellOriginCommon:e,binIdRange:n}=this.state;r.setProps({binIdRange:n,pointCount:this.getNumInstances(),operations:[o.aggregation],binOptions:{cellSizeCommon:t,cellOriginCommon:e}})}return(0,s.b)(n.contours,o.contours,2)||this.setState({contourData:null}),e}_updateBinOptions(){const t=this.getBounds(),e=[1,1];let o=[0,0],n=[[0,1],[0,1]],s=this.context.viewport;if(t&&Number.isFinite(t[0][0])){let r=[(t[0][0]+t[1][0])/2,(t[0][1]+t[1][1])/2];const{cellSize:a,gridOrigin:c}=this.props,{unitsPerMeter:g}=s.getDistanceScales(r);e[0]=g[0]*a,e[1]=g[1]*a;const l=s.projectFlat(r);o=[Math.floor((l[0]-c[0])/e[0])*e[0]+c[0],Math.floor((l[1]-c[1])/e[1])*e[1]+c[1]],r=s.unprojectFlat(o);const u=s.constructor;s=s.isGeospatial?new u({longitude:r[0],latitude:r[1],zoom:12}):new i.A({position:[r[0],r[1],0],zoom:12}),o=[Math.fround(s.center[0]),Math.fround(s.center[1])],n=(0,at.O)({dataBounds:t,getBinId:t=>{const n=s.projectFlat(t);return[Math.floor((n[0]-o[0])/e[0]),Math.floor((n[1]-o[1])/e[1])]}})}this.setState({cellSizeCommon:e,cellOriginCommon:o,binIdRange:n,aggregatorViewport:s})}draw(t){t.shaderModuleProps.project&&(t.shaderModuleProps.project.viewport=this.state.aggregatorViewport),super.draw(t)}_onAggregationUpdate(){const{aggregator:t,binIdRange:e}=this.state;this.setState({aggregatedValueReader:rt({aggregator:t,binIdRange:e,channel:0}),contourData:null})}_getContours(){const{aggregatedValueReader:t}=this.state;if(!t)return null;if(!this.state.contourData){const{binIdRange:e}=this.state,{contours:o}=this.props,n=function({contours:t,getValue:e,xRange:o,yRange:n}){const s=[],i=[];let r=0,a=0;for(let c=0;c<t.length;c++){const g=t[c],l=g.zIndex??c,{threshold:u}=g;for(let t=o[0]-1;t<o[1];t++)for(let c=n[0]-1;c<n[1];c++){const{code:p,meanCode:d}=nt({getValue:e,threshold:u,x:t,y:c,xRange:o,yRange:n}),S={x:t,y:c,z:l,code:p,meanCode:d};if(Array.isArray(u)){const t=st(S);for(const e of t)i[a++]={vertices:e,contour:g}}else{const t=it(S);t.length>0&&(s[r++]={vertices:t,contour:g})}}}return{lines:s,polygons:i}}({contours:o,getValue:t,xRange:e[0],yRange:e[1]});this.state.contourData=n}return this.state.contourData}onAttributeChange(t){const{aggregator:e}=this.state;switch(t){case"positions":e.setNeedsUpdate(),this._updateBinOptions();const{cellSizeCommon:t,cellOriginCommon:o,binIdRange:n}=this.state;e.setProps({binIdRange:n,binOptions:{cellSizeCommon:t,cellOriginCommon:o}});break;case"counts":e.setNeedsUpdate(0)}}renderLayers(){const t=this._getContours();if(!t)return null;const{lines:e,polygons:o}=t,{zOffset:n}=this.props,{cellOriginCommon:s,cellSizeCommon:i}=this.state,g=this.getSubLayerClass("lines",a.A),l=this.getSubLayerClass("bands",c.A),u=(new ct.k).translate([s[0],s[1],0]).scale([i[0],i[1],n]);return[e&&e.length>0&&new g(this.getSubLayerProps({id:"lines"}),{data:e,coordinateSystem:r.rf.CARTESIAN,modelMatrix:u,getPath:t=>t.vertices,getColor:t=>t.contour.color??lt,getWidth:t=>t.contour.strokeWidth??1,widthUnits:"pixels"}),o&&o.length>0&&new l(this.getSubLayerProps({id:"bands"}),{data:o,coordinateSystem:r.rf.CARTESIAN,modelMatrix:u,getPolygon:t=>t.vertices,getFillColor:t=>t.contour.color??lt})]}getPickingInfo(t){const e=t.info,{object:o}=e;return o&&(e.object={contour:o.contour}),e}}ut.layerName="ContourLayer",ut.defaultProps={cellSize:{type:"number",min:1,value:1e3},gridOrigin:{type:"array",compare:!0,value:[0,0]},getPosition:{type:"accessor",value:t=>t.position},getWeight:{type:"accessor",value:1},gpuAggregation:!0,aggregation:"SUM",contours:{type:"object",value:[{threshold:1}],optional:!0,compare:3},zOffset:.005};const pt=ut}}]);